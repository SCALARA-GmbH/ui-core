name: development-core
on:
  push:
    branches:
      - development
    paths:
      - 'core/**'
      - 'visual-test/**'
      - '.github/workflows/dev.core.yml'

jobs:
  unit-test:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: core
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.17.3'
      - run: yarn install --frozen-lockfile
      - run: yarn type-check
      - run: yarn lint
      - run: yarn test

  visual-test:
    defaults:
      run:
        working-directory: visual-test
    runs-on: self-hosted
    needs: [ unit-test ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.17.3'
          cache: 'yarn'

      - run: docker rm -f $(docker ps -aq) || echo 'no containers to remove'
      - run: docker volume rm $(docker volume ls -q) || echo 'no volumes to remove'
      - run: docker-compose down -v
      - run: docker-compose pull
      - run: docker-compose up --build -d ui-core

      - run: yarn install
      - name: lint
        run: |
          yarn lint
      - name: wait on storybook
        timeout-minutes: 5
        run: |
          yarn run wait-on "http-get://localhost:6006"
      - name: test basics
        run: |
          yarn test:basics
      - name: test component interactions
        run: |
          yarn test:components:interactions
      - name: test elements interactions
        run: |
          yarn test:elements:interactions
      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v1
      - name: upload visual regression on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: visual-regression
          path: ./visual-test/test-results/


  publish-storybook:
    needs: [unit-test, visual-test]
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: core
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.17.3'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dev-ui-core
          IMAGE_TAG: ${{ github.event_name }}_${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-storybook:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: [ publish-storybook ]
    defaults:
      run:
        working-directory: operations/ui-core-chart
    steps:
      - uses: actions/checkout@v2
      - name: install helm
        uses: azure/setup-helm@v1
        with:
          version: 3.1.1
        id: install

      - name: set kube context
        run: echo ${{ secrets.KUBECONFIG_FILE_64BASE }} | base64 --decode > /tmp/config

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.event_name }}_${{ github.sha }}
          KUBECONFIG: /tmp/config
        run: ${{ steps.install.outputs.helm-path }} upgrade -f ./values.yaml --set core.image=$ECR_REGISTRY/dev-ui-core:$IMAGE_TAG dev-ui .

